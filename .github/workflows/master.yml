name: DCSA-OVS MASTER CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Java JDK
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: maven-settings-xml-action
      uses: whelk-io/maven-settings-xml-action@v12
      with:
        repositories: '[{ "id": "github", "name": "DCSA Backend repo", "url": "https://maven.pkg.github.com/dcsaorg/DCSA-Core", "releases": { "enabled": "true" }, "snapshots": { "enabled": "true" } }]'
        servers: '[{ "id": "github", "username": "${{ secrets.DCSA_USER }}", "password": "${{ secrets.DCSA_PACKAGES_PAT }}" }]'
    - name: Fetch backend
      uses: actions/checkout@v2
      with:
        path: DCSA-OVS
        submodules: recursive
    - name: Build Operational Vessel Schedules API
      run: cd DCSA-OVS && mvn package -DskipTests -X #Need to skip the tests as they depend on a running DB
    - name: Build and run the microservices
      run: cd DCSA-OVS && docker-compose -f docker-compose.yml up -d -V

    - name: Fetch Backend Status
      run: |
        sleep 10
        echo "::set-output name=STATUS::$(curl -s http://localhost:9090/v2/actuator/health | jq -r '.status')"
      id: healthcheck

    - name: Confirm microservice status
      if: ${{ steps.healthcheck.outputs.STATUS == 'UP' }}
      run: |
        echo "The DCSA-OVS service is UP."

    - name: Confirm microservice status
      if: ${{ steps.healthcheck.outputs.STATUS != 'UP' }}
      uses: actions/github-script@v3
      with:
        script: |
          core.setFailed('The DCSA-OVS service is down.')

    - name: Checkout dcsaorg/DCSA-API-Validator
      uses: actions/checkout@v2
      with:
        repository: dcsaorg/DCSA-API-Validator
        ref: master
        token: ${{ secrets.REPO_ACCESS_PAT }}
        path: DCSA-API-Validator
        
      # Assert that the database is ready to load the test data.
    - run: echo 'SELECT * FROM dcsa_im_v3_0.location;' | docker exec -i -u postgres dcsa_db psql -d dcsa_openapi -f - 2>/dev/null || sleep 5

    - name: Load DCSA test data
      run: cat DCSA-OVS/DCSA-Information-Model/datamodel/testdata.d/*.sql | docker exec -i -u postgres dcsa_db psql -d dcsa_openapi -f -
        
    - name: Run the API validator on OVSV2
      run: cd DCSA-API-Validator && mvn -Dtest.suite=OVSV2.xml test || (echo "==== OVS logs ====" ; docker logs dcsa-ovs_dcsa-ovs_1; exit 1)
      env: 
        client_secret: ${{ secrets.AUTH0_DCSA_CLIENT_SECRET }}
        client_id: 1qEYXCbxWvjeYS8VVm1BfnfZrP3TY9n8
        audience: localhost
        OAuthTokenUri: https://dcsa.eu.auth0.com/oauth/token
        API_ROOT_URI: http://localhost:9090/v2
